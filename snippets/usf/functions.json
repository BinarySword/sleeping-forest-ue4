{
	"radial_gradient_exponential": {
		"prefix": "radial_gradient_exponential",
		"body": [
			"// Exponential square fallout function",
			"float radial_gradient_exponential(float2 UV, float Radius, float Density) {",
			"\tfloat2 NeUV = UV - 0.5;",
			"\tfloat center_distance = sqrt(dot((NeUV - 0), (NeUV - 0))); // [0, 0.5] in X/Y",
			"\tfloat linear_offset = 1 - (center_distance / Radius); // -ve, if center_distance > Radius",
			"\tfloat pow = 1 - linear_offset * Density;",
			"\tfloat output = 1 / PositiveClampedPow(2.71828198, pow * pow); // 1/e^(x^2) --> Exponential sq. Falloff",
			"float retval = (abs(linear_offset) > 0.00001) ? ((linear_offset >= 0) ? output : 1) : 1; // Goes to INF at center.",
			"return 1 - retval;",
			"}"
		]
	},
	"radial_gradient_exponential_band": {
		"prefix": "radial_gradient_exponential_band",
		"body": [
			"// Exponential square fallout function. Works on a band. Alternative to subtracting separate gradients",
			"float radial_gradient_exponential_band(float2 UV, float Radius_Start, float Radius_End, float Density) {",
			"\tfloat2 NeUV = UV - 0.5;",
			"\tfloat band_width = abs(Radius_End - Radius_Start);",
			"\tfloat center_distance = sqrt(dot(NeUV, NeUV));",
			"\tfloat offset_distance = min(max(center_distance - Radius_Start, 0), band_width); // 0 till radius_start, [Radius_Start, Radius_End] in X/Y for band",
			"\tfloat linear_offset = 1 - (offset_distance / band_width); // -ve, if center_distance > Radius",
			"\tfloat pow = linear_offset * Density;",
			"\tfloat output = 1 / PositiveClampedPow(2.71828198, pow * pow); // 1/e^(x^2) --> Exponential sq. Falloff",
			"\tfloat retval = (abs(linear_offset) > 0.00001) ? ((linear_offset >= 0) ? output : 1) : 1; // Goes to INF at center.",
			"\treturn (1 - retval) * step(Radius_Start, center_distance); // Removes values before Radius_Start",
			"}"
		]
	}
}
